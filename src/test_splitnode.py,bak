import unittest

from splitnode import split_nodes_delimiter
from textnode import TextNode, TextType

class TestSplitNode(unittest.TestCase):
    def test_split_with_single_delimiter(self):
        old_nodes = [
            TextNode("This is **bold** text", TextType.TEXT)
        ]
        result = split_nodes_delimiter(old_nodes, "**", TextType.BOLD)

        self.assertEqual(len(result), 3, "The result should contain 3 TextNodes.")
        self.assertEqual(result[0], TextNode("This is ", TextType.TEXT))
        self.assertEqual(result[1], TextNode("bold", TextType.BOLD))
        self.assertEqual(result[2], TextNode(" text", TextType.TEXT))

    def test_split_with_multiple_nodes(self):
        old_nodes = [
            TextNode("This is **bold**", TextType.TEXT),
            TextNode(" and this is _italic_", TextType.TEXT),
        ]

        # Test for bold
        bold_result = split_nodes_delimiter(old_nodes, "**", TextType.BOLD)
        self.assertEqual(len(bold_result), 3, "Result after processing bold should have 3 TextNodes.")
        self.assertEqual(bold_result[1], TextNode("bold", TextType.BOLD))

        # Test for italic
        italic_result = split_nodes_delimiter(old_nodes, "_", TextType.ITALIC)
        self.assertEqual(len(italic_result), 3, "Result after processing italic should have 3 TextNodes.")
        self.assertEqual(italic_result[1], TextNode("italic", TextType.ITALIC))

    def test_unmatched_delimiter_raises_exception(self):
        old_nodes = [
            TextNode("This is **bold", TextType.TEXT)  # missing closing **
        ]

        with self.assertRaises(Exception) as context:
            split_nodes_delimiter(old_nodes, "**", TextType.BOLD)

        self.assertEqual(
            str(context.exception),
            "Unmatched delimiter '**' in text: This is **bold",
            "Exception message should indicate unmatched delimiter."
        )

if __name__ == "__main__":
    unittest.main()